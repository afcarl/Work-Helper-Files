import salesforce_reporting
from salesforce_reporting import Connection
from credentials import *
import pandas as pd
import numpy as np
import datetime
from datetime import datetime
import pandas as pd
import mysql.connector
from sqlalchemy import create_engine
import logging
import unittest
import sys


def sqlcol(dfparam):

    dtypedict = {}
    for i,j in zip(dfparam.columns, dfparam.dtypes):
        if "object" in str(j):
            dtypedict.update({i: sqlalchemy.types.NVARCHAR(length=255)})

        if "datetime" in str(j):
            dtypedict.update({i: sqlalchemy.types.DateTime()})

        if "float" in str(j):
            dtypedict.update({i: sqlalchemy.types.Float(precision=3, asdecimal=True)})

        if "int" in str(j):
            dtypedict.update({i: sqlalchemy.types.INT()})

    return dtypedict



def build_sf_dict():
	# Connect to SalesForce using my credentials
	while True:
		try:
			sf = Connection(username=sfuser, password=sfpassword,
							security_token=sftoken)
			report = sf.get_report(sfreport)
			print "Connection to SalesForce was successful, report opened successfully."
			parser = salesforce_reporting.ReportParser(report)
			# Return a dictionary of the Open Engineering Escalations Report
			dictionary = parser.records_dict()
			return dictionary
			break
		except:
			print "Connect to SalesForce was unsuccessful, trying to connect again."
			break

# Pull Data In To Variable all_data


def save_SF_mysql(sf_dictionary, table_name):
	while True:
		try:
			df = pd.DataFrame(sf_dictionary)
			column_names = df.columns
			no_spaces = []
			for i in column_names:
				j = i.replace(' ', '')
				no_spaces.append(j)
			df.columns = no_spaces


			# convert each column to the mySQL format for date
			df['DateReported'] = df['DateReported'].apply(
				lambda row: datetime.strptime(row, '%m/%d/%Y').strftime('%Y-%m-%d %H:%M:%S'))
			df['DateResolved'] = df['DateResolved'].apply(
				lambda row: datetime.strptime(row, '%m/%d/%Y').strftime('%Y-%m-%d %H:%M:%S'))
			df['DateReviewed'] = df['DateReviewed'].replace(['-'], ['1/1/1900']).apply(
				lambda row: datetime.strptime(row, '%m/%d/%Y').strftime('%Y-%m-%d %H:%M:%S')).replace(['1900-01-01 00:00:00'], [None])
			df = df.replace(['-'], [None]).replace(['None'],[None]).replace(['None.'],[None])


			config = {
			  'user': mySQLuser,
			  'password': mySQLpassword,
			  'host': mySQLhost,
			  'database': mySQLdatabase,
			  'raise_on_warnings': mySQLraise_on_warnings
			}
			engine = create_engine('mysql+mysqlconnector://solidfire:solidfire@dma-cpe-01/dma')
			df.to_sql(name=table_name, con=engine, if_exists='replace', index=False, chunksize=1)
			print 'SalesForce CSV export was successful. Saved table as %s' %table_name
			break
		except:
			print "Error saving salesforce to MySQL!!!"
			break




# Pull Data In To Variable all_data
sf_dictionary = build_sf_dict()
# Save SF Dictionary
save_SF_mysql(sf_dictionary, "sales_force_data")